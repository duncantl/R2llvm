<article xmlns:r="http://www.r-project.org"
         xmlns:xi="http://www.w3.org/2003/XInclude"
	 xmlns:c="http://www.C.org"
	 xmlns:omg="http://www.omegahat.org">

<articleinfo>

<title></title>

<author><firstname>Duncan</firstname><surname>Temple Lang</surname>
  <affiliation><orgname>University of California at Davis</orgname>
               <orgdiv>Department of Statistics</orgdiv>
  </affiliation>
</author>
</articleinfo>

<section>
<title></title>

<para>
Here we compile the BML - Biham-Midleton-Levine - traffic model.
This is a very simple dynamic system.
We start with a grid populated (randomly) with cars occupying
cells in that grid. 

</para>
<para>
We'll define constants to indicate the state of a cell.
<r:code>
EMPTY = 0L
RED = 1L
BLUE = 2L
</r:code>

</para>

<para>
We'll assume that the grid has already been created.
That is the relatively inexpensive computation.
Moving the cars is the expensive, time-critical version.
This is because we call it twice for each unit of time
and we have lots of these.
</para>

<para>
We'll assume that we have both the grid and two parallel vectors
<r:var>rows</r:var> and <r:var>cols</r:var> which contain the
locations of the cars to be moved.  Thus we will have two sets of
<r:var>rows</r:var> and <r:var>cols</r:var>, one for the RED and one
for the BLUE cars.
The idea is reasonably straightforward.
We loop over the <r:var>n</r:var> cars
and get its location
<r:code eval="false">
i = rows[k]
j = cols[k]
</r:code>
We then compute the next position.
This differs depending on which type of car we are moving.
<r:code eval="false"><![CDATA[[
if(dir == RED) {
  nextRow = i
  nextCol = if(i <= ncol(grid) ) i + 1L else 1L
} else {
  nextCol = j
  nextRow = if(j <= nrow(grid) ) j + 1L else 1L
}  
]]></r:code>
<note>
We could determine direction from the content of the grid cell for the first car we move.
For now we pass it explicitly.
</note>
</para>

<para>
Next, we determine if the target cell is empty. If it is, we update
the <r:var>grid</r:var> and  both <r:var>rows</r:var> and <r:var>cols</r:var>
with the new states, i.e. move the car to the new cell and mark the current cell as empty.
<r:code eval="false">
if(grid[nextRow, nextCol] == EMPTY) {
   grid[nextRow, nextCol] = dir
   grid[i, j] = EMPTY
}
</r:code>
</para>



<para>
Let's put all of this together into a function.
<r:function id="moveCars"><![CDATA[
moveCars = 
function(grid, rows, cols, dir = RED)
{
  nc = Rf_ncols(grid)
  nr = Rf_nrows(grid)
  ctr = 0L

  for(k in 1:length(rows)) {
      i = rows[k]
      j = cols[k]

      if(dir == RED) {
         nextRow = i
	 nextCol = if(j < nc ) j + 1L else 1L
       } else {
.debug(printf("setting blue\n"))
         nextCol = j
	 nextRow = if(i < nr ) i + 1L else 1L
.debug(printf("done\n"))
       }  

.debug(printf("(%d, %d) -> (%d, %d)\n", i, j, nextRow, nextCol))

       if(grid[nextRow, nextCol] == EMPTY) {
.debug(printf("moving\n"))
          ctr = ctr + 1L
          grid[nextRow, nextCol] = dir
	  grid[i, j] = EMPTY
          rows[k] = nextRow
          cols[k] = nextCol
       }
  }
.debug(  printf("num moved %d\n", ctr))
  ctr
}
]]></r:function>
<fix>Use nrow and ncol and have the compiler convert these to Rf_nrows(), etc. But ignore them as global functions</fix>
In this version, we are assuming that <r:arg>grid</r:arg>, <r:arg>rows</r:arg> and <r:arg>cols</r:arg>
are mutable arrays, i.e. pointers to the data.
</para>
<para>
We can compile this with
<r:code id="compile">
library(RLLVMCompile)
m = Module()
moveCars_f = compileFunction(moveCars, Int32Type, 
                             list(MatrixType(Int32Type), INTSXPType, INTSXPType, Int32Type),
                              .constants = list(EMPTY = EMPTY, RED = RED, BLUE = BLUE), module = m, .debug = FALSE)
</r:code>


<r:code>
g = matrix(0L, 3,5)
red.rows = as.integer(c(1, 2, 2))
red.cols = as.integer(c(1, 2, 4))
blue.rows = as.integer(c(2, 1, 1, 2))
blue.cols = as.integer(c(1, 3, 4, 5))
g[cbind(red.rows, red.cols)] = 1L
g[cbind(blue.rows, blue.cols)] = 2L
</r:code>

<r:code>
print(g)
print(red.cols)
o = .llvm(moveCars_f,  g, red.rows, red.cols,  RED, .all = TRUE)
print(red.cols)
print(blue.rows)
print(g)
o = .llvm(moveCars_f,  g, blue.rows, blue.cols,  BLUE, .all = TRUE)
print(blue.rows)
print(g)
</r:code>

</para>


<para>

<r:function><![CDATA[
convertGrid = 
function(g)
{
  g[g == "red"] = 1L
  g[g == "blue"] = 2L
  g[g == ""] = 0L
  g = matrix(as.integer(g), nrow(g), ncol(g))
  class(g) = c("BMLGrid", "matrix")
  g
}
]]></r:function>

<r:code id="initGrid">
xmlSourceFunctions("~/Projects/CaseStudies/BML/BML.Rdb", verbose = FALSE)

g = convertGrid(createGrid(10, .5))

red.rows = row(g)[g == 1L]
red.cols = col(g)[g == 1L]
blue.rows = row(g)[g == 2L]
blue.cols = col(g)[g == 2L]

stopifnot(all(g[cbind(red.rows, red.cols)] == 1L))
stopifnot(all(g[cbind(blue.rows, blue.cols)] == 2L))
</r:code>
</para>


<para>
<r:function id="lrunBML"><![CDATA[
lrunBML = 
function(g, rrows, rcols, brows, bcols, niter)
{
   for(i in 1:niter) {
.debug(printf("[lrunBML] time %d\n", i))
.debug(Rf_PrintValue(g))
.debug(Rf_PrintValue(rcols))
.debug(Rf_PrintValue(brows))
.debug(printf("\tstart %d\n", i))
      moveCars(g, rrows, rcols, RED)
      moveCars(g, brows, bcols, BLUE)
.debug(printf("\tend %d\n", i))
   }
}
]]></r:function>

<r:code eval="true">
lrunBML_c = compileFunction(lrunBML, VoidType, 
                             list(MatrixType(Int32Type), INTSXPType, INTSXPType, INTSXPType, INTSXPType, Int32Type), module = m, .debug = FALSE)
</r:code>

<r:code eval="true">
ee = ExecutionEngine(m)

set.seed(3)
g = convertGrid(createGrid(4, c(2, 2)))
red.rows = row(g)[g == 1L]
red.cols = col(g)[g == 1L]
blue.rows = row(g)[g == 2L]
blue.cols = col(g)[g == 2L]

o = .llvm(moveCars_f,  g, red.rows, red.cols,  RED, .all = TRUE)

o = .llvm(lrunBML_c,  g, red.rows, red.cols, blue.rows, blue.cols, 2L, .all = TRUE, .ee = ee)

old.red.cols = as.numeric(red.cols)
old.blue.rows = as.numeric(blue.rows)
g.orig = .Call("Rf_duplicate", g) + .0
o = .llvm(lrunBML_c,  g, red.rows, red.cols, blue.rows, blue.cols, 1L, .all = TRUE, .ee = ee)
</r:code>
</para>


</section>

<section r:eval="false" id="timings">
<title>Run-time performance</title>

<para>
<r:code id="run1">
set.seed(3)
g = convertGrid(createGrid(100, .24))
red.rows = row(g)[g == 1L]
red.cols = col(g)[g == 1L]
blue.rows = row(g)[g == 2L]
blue.cols = col(g)[g == 2L]
tm1 = system.time({o = .llvm(lrunBML_c,  g, red.rows, red.cols, blue.rows, blue.cols, 1000L, .all = TRUE, .ee = ee, .duplicate = 1:5)})
plot(o[[1]])
</r:code>

</para>
<para>
<r:code id="run2">
set.seed(3)
g = convertGrid(createGrid(100, .5))
red.rows = row(g)[g == 1L]
red.cols = col(g)[g == 1L]
blue.rows = row(g)[g == 2L]
blue.cols = col(g)[g == 2L]
tm2 = system.time({o = .llvm(lrunBML_c,  g, red.rows, red.cols, blue.rows, blue.cols, 1000L, .all = TRUE, .ee = ee, .duplicate = 1:5)})
plot(o[[1]])
</r:code>
</para>


<para>
<r:code id="run3">
set.seed(3)
g = convertGrid(createGrid(1000, .5))
red.rows = row(g)[g == 1L]
red.cols = col(g)[g == 1L]
blue.rows = row(g)[g == 2L]
blue.cols = col(g)[g == 2L]
tm3 = system.time({o = .llvm(lrunBML_c,  g, red.rows, red.cols, blue.rows, blue.cols, 1000L, .all = TRUE, .ee = ee, .duplicate = 1:5)})
plot(o[[1]])
</r:code>
</para>

<para>
<r:code id="run4">
set.seed(3)
g = convertGrid(createGrid(1000, .2))
red.rows = row(g)[g == 1L]
red.cols = col(g)[g == 1L]
blue.rows = row(g)[g == 2L]
blue.cols = col(g)[g == 2L]
tm4 = system.time({o = .llvm(lrunBML_c,  g, red.rows, red.cols, blue.rows, blue.cols, 1000L, .all = TRUE, .ee = ee, .duplicate = 1:5)})
plot(o[[1]])
</r:code>
</para>


<para>
If we compare this to the C code in CaseStudies/BML.Rdb and the associated files in that directory,
we basically have that a 1000x1000 grid with density .5 run for 1000 iterations
takes 4.4 seconds in C and 11.8 seconds with our LLVM-compiled code here.
The C code is compiled with clang, so we are using the same basic technology.
So there is room for further optimizations here.
</para>


<para>
Let's see if any simple code-elimination passes improve matters
<r:code>
mm = as(lrunBML_c, "Module")
str = showModule(mm, TRUE)
mm = clone(mm)
p = list(createAggressiveDCEPass, createDeadStoreEliminationPass, createDeadStoreEliminationPass)
mgr = passManager(NULL, FALSE)
lapply(p, function(f) addPass(mgr, f()))
run(mgr, mm)
str1 = showModule(mm, TRUE)
</r:code>

<r:code id="run5">
.ee = ExecutionEngine(mm)
set.seed(3)
g = convertGrid(createGrid(1000, .5))
red.rows = row(g)[g == 1L]
red.cols = col(g)[g == 1L]
blue.rows = row(g)[g == 2L]
blue.cols = col(g)[g == 2L]
# Run once to JIT
system.time({o = .llvm(lrunBML_c,  g, red.rows, red.cols, blue.rows, blue.cols, 2L, .all = TRUE, .ee = ee)})
tm5 = system.time({o = .llvm(lrunBML_c,  g, red.rows, red.cols, blue.rows, blue.cols, 1000L, .all = TRUE, .ee = ee)})
plot(o[[1]])
</r:code>
This brings the time down to about 9.8 seconds.
This is about 2 times slower than the <c/> code.
However, this seems to be be because we are running it on the output
from the previous run and so the cars have reached equilibrium.
So this improvement is not real!
</para>


</section>




<ignore>
<section>
<para>
The following is a semi-vectorized version.
It uses loops to move the cars, but it uses vectors to find the cars.

<r:code eval="false">
moveCars =
function(grid, color = RED)
{
  i = row(grid)[grid != ""]
  j = col(grid)[grid != ""]
  pos = cbind(i, j)
  colors = grid[pos]
  cars = data.frame(i = i, j = j, colors = colors)

  w = which(cars$colors == color)
  for(idx in w) {

    curPos = c(i = cars$i[ idx ], j = cars$j[idx])
    nextPos = if(color == "red")
                c(curPos[1],
                  if(curPos[2] == ncol(grid))
                    1L
                  else
                    curPos[2] + 1L)
             else
                c(if(curPos[1] == nrow(grid))
                    1L
                  else
                    curPos[1] + 1L,
                  curPos[2])

        # check if nextPos is empty
    if(grid[ nextPos[1], nextPos[2] ] == "")  {
       grid[nextPos[1], nextPos[2]] = color
       grid[curPos[1], curPos[2]] = ""
    }
   }

  grid
}
</r:code>
</para>
</section>
</ignore>


</article>
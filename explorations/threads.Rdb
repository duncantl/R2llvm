<article xmlns:r="http://www.r-project.org"
         xmlns:xi="http://www.w3.org/2003/XInclude"
	 xmlns:c="http://www.C.org"
	 xmlns:omg="http://www.omegahat.org">

<articleinfo>

<title></title>

<author><firstname>Duncan</firstname><surname>Temple Lang</surname>
  <affiliation><orgname>University of California at Davis</orgname>
               <orgdiv>Department of Statistics</orgdiv>
  </affiliation>
</author>
</articleinfo>

<r:code>
library(RLLVMCompile)
</r:code>

<section>
<title></title>

<para>

 The idea here is to explore creating a routine that
 can be run in multiple threads
 We'll make them run for a reasonable length of time
 We'll use a simple loop


 How do we marshall an integer as a pointer to the thread.

 Other example: read from several files in parallel.
 Filter a CSV file, counting the number of lines , or counting the number
 of times a particular variable has a value greater than V

 Our routine takes a numeric  vector
<r:code>
data = lapply(c(10, 30, 15, 40, 70)*10000, rnorm) # 1000000
</r:code>

<r:function><![CDATA[
threadFun =
function(x)
{
  ans = 0L
  for(val in x)
     ans = ans + (val > .25)
 
  Rf_ScalarInteger(ans)  # we can relax this later with more information for the compiler.
}
]]></r:function>    

</para>
<para>
We'd like the compiler to insert the <c:func>Rf_ScalarInteger</c:func> call in for us.
We'd also like the compiler to create the same routine from the <r/>
function
<r:function><![CDATA[
function(x)
   sum(x > .25)
]]></r:function>
This is loop fusion and we have examples of this already.
</para>
<para>
We would create and launch the threads with
<r:code eval="false">
lapply(data, function(x) pthread_create(threadFun_c, x))
</r:code>

For now, let's suppose we have written mechanism to launch the threads
and we'll focus on creating the compiled thread routine from <r:func>threadFun</r:func>.

<r:code>
ff = compileFunction(threadFun, SEXPType, list(REALSXPType))
</r:code>

<r:code>
dyn.load("threadLaunch.so")
</r:code>

<r:code>
ee = ExecutionEngine(ff)
fun = getPointerToFunction(ff, ee)
</r:code>
<r:code>
ans = .Call("R_pthread_apply", fun@ref, data)
</r:code>
</para>


<para>

<r:code>
tm.r = system.time(sapply(data,  function(x) sum(x > .25)))
tm.ll = system.time(.Call("R_pthread_apply", fun@ref, data))
</r:code>

<r:code>
sym = getNativeSymbolInfo("R_greaterThan")
tm.c = system.time(.Call("R_pthread_apply", sym$address, data))
</r:code>

<r:code>
rbind(tm.r, tm.ll, tm.c)[, 1:3]
<r:output><![CDATA[
      user.self sys.self elapsed 
tm.r      0.654    0.789   1.443 
tm.ll     0.416    0.002   0.153 
tm.c      1.129    0.004   0.458 
]]></r:output>
</r:code>
</para>

</section>

<section>
<title><c:func>R_pthread_apply</r:func> in <r/></title>

<para>
We wrote the <c:func>R_pthread_apply</c:func> routine directly in <c/> code.
We would like to be able to write it in <r/> and compile it.
In fact, since the number of threads is small, the 
loop is not a computational bottleneck in <r/>, so the need to compile
is not vital for efficiency.
However, we have to write interfaces to <c:func>pthread_create</c:func>
and <c:func>pthread_join</c:func> and work with external pointer objects in <r/>.
This is not complicated, but tedious. We can use
the <omg:pkg>RCIndex</omg:pkg> package to create the interface programmatically.
However, being able to compile the native code directly from an <r/> template
simplifies the process.
</para>
<para>
We can write the code as
<r:function><![CDATA[
function(data, fun)
{
   threads = lapply(data, function(el)  pthread_create(thread, NULL, fun, el)[[1]])
   sapply(threads, function(th) pthread_join(th, ans)[[2]])
}
]]></r:function>
<fix>We want to be able to detect that thread and ans are the return values and avoid the [[1]] and [[2]] in the calls</fix>
</para>
</section>


</article>
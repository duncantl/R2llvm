<article xmlns:r="http://www.r-project.org"
         xmlns:xi="http://www.w3.org/2003/XInclude"
	 xmlns:omg="http://www.omegahat.org"
	 xmlns:c="http://www.C.org">

<articleinfo>

<title>Compiling Access to Matrix Elements</title>

<author><firstname>Duncan</firstname><surname>Temple Lang</surname>
  <affiliation><orgname>University of California at Davis</orgname>
               <orgdiv>Department of Statistics</orgdiv>
  </affiliation>
</author>
</articleinfo>

<section>
<title></title>

<para>
This is a simplified version of the Rgibbs example in Rgibbs.Rdb.
Here we want to assign values to elements in a matrix.
We will grow this to loop over the rows and set all cells.
However, the key  for the example is to set elements in the matrix.
So we'll the simple function:
<r:function><![CDATA[
f =
function(m, i)
{
  m[i, 2L] = 10
#  m[i, 1] = 107   # works for numeric, i.e. 1 rather than 1L
}
]]></r:function>
The input is an n x c matrix. Later we will consider a data frame.
Unfortunately, nowhere in the function is there information that this is a matrix.
We could infer this based on the expression <r:expr eval="false">m[2, 2]</r:expr> as this indicates a matrix or data frame.
However, we need the user to tell us that this is matrix and not a data frame.
(Type inference may help us here, but we need a context.)
</para>

<para>
We will assume that the matrix does not change dimensions within the body function.
We can deal with this situation, but it is not important here.
</para>


<para>
As we discussed in <ulink url="2DRandomWalk.Rdb"/>, we often find it
useful to pass an <r/> vector as a pointer to the collection of
elements, e.g. a <c:type>double *</c:type> corresponding to a
<r:numeric/> vector.  The <r:func>.llvm</r:func> function handles
passing the pointer for the <r/> object.  However, if we do this in
this case, how do we know the dimensions of the matrix?
We have several choices:
<ol>
<li>pass the matrix object as a SEXP and extract the dimensions in the <llvm/> code</li>
<li>pass the matrix as a <c:type>double *</c:type> and two additional parameters that give the number of rows and columns</li>
<li> pass the matrix as a pointer, and the two dimensions as an integer vector with two elements</li>
</ol>
We can hide the details of the latter from the user by creating an <r/> function  that invokes the <llvm/>
routine and passes the dimension parameters on behalf of the user, e.g.
<r:function><![CDATA[
cf = function(m)
       .llvm(fc, m, nrow(m), ncol(m), .all = TRUE)[[1]]
]]></r:function>
</para>

<para>
The critical thing for us is that the user specifies the type of the
<r:arg>m</r:arg> parameter as a matrix with numeric elements. With
this, we can implement any of the three approaches above.  How can we
specify the matrix type? We can use the "native" <llvm/> types and
create new composites.  We might create an array of arrays. Are these
arrays of rows ? or arrays of columns?  Perhaps we don't care as we
can query the dimensions without being concerned about what the
dimensions mean.
</para>
<para>
We could also represent the type using an <r/> class, e.g.,
<r:expr eval="false">MatrixType(pointerType(DoubleType))</r:expr>
which would create an object of class <r:class>MatrixType</r:class>.
Our compiler would then recognize this and decide whether to add parameters or accept the <c:type>SEXP</c:type> object
and compute the dimensions in the body of the new routine.
</para>

<para>
We could also create a new <llvm/> Type class that represents a matrix.
We would then be able to create instances of this class within <r/>
(via a <r:func>.Call</r:func> routine) and populate it with
the element type, the number of rows and columns.
This may be problematic as we can only create one instance of each <llvm/> Type class.
This makes it problematic to have dynamic content that differentiates data types from the same class.
</para>
<para>
Perhaps the simplest approach is to represent the type entirely in <r/>, i.e. with 
the <r:func>MatrixType</r:func> call.
It is easy to define an <r/> class to represent this information. 
However, how easy is it to work with when processing the input?
Much of the type processing mechanism is based on the native <llvm/> types.
So this would introduce a two-tier system.
</para>


<para>
So let's use the <r:func>MatrixType</r:func> as our input.
We have to specify the element type, i.e. <r:var>DoubleType</r:var>.
We don't specify the dimensions as these will be determined when we call the function.
So we define the type with
<r:code>
library(RLLVMCompile)
numericMatrixType = MatrixType(DoubleType)
</r:code>
</para>

<para>
We'll compile the function with the call
<r:code>
fc = compileFunction(f, VoidType, list(m = numericMatrixType, Int32Type))
</r:code>
(Note that we used an explicit argument name here. This will make following what happens easier. It is not essential as our compiler will add an argument name.)
What does this produce?
It will pass the <r/> object to the routine and we will calculate the 
dimensions in the body of the code.
The code this generates corresponds to the following <c/> code:
<c:code>
void
f(SEXP m, Int32Type i)
{
    int m.nrow = Rf_nrows(m);
    int m.ncol = Rf_ncols(m);
    
    double *m.els = REAL(m);

    m.els[ (2 - 1) * m.nrow + i ] = 10
}
</c:code>
<r/> provides <c:func>Rf_nrows</c:func> and <c:func>Rf_ncols</c:func> 
for matrices.
</para>
<para>
Our function <r:func>compileFunction</r:func> then identifies 
the matrix type and replaces it with a regular <c:type>SEXP</c:type> for
the purposes of the signature. 
It keeps the more complete <c:class>MatrixType</c:class> information about that
parameter, associating it with the parameter name.
Since we know the element type at compile-time, we know that we can obtain a pointer to the 
sequence of elements of the matrix by calling <c:func>REAL</c:func>. So
the compiler will declare and initialize <r:arg>m.els</r:arg> either at the start of the routine
or when it is needed.
When code in our <r/> function uses <r:arg>m</r:arg>  in any way that requires the 
the dimensions, the compiler generates code to define <r:var>m.nrow</r:var> and <r:var>m.ncol</r:var>.
(Again, we could rewrite the <r/> function <r:func>f</r:func> and add the lines.

</para>



<para>


<r:code eval="false">
library(XML)
xmlSourceFunctions("matrixElAssign.Rdb")

library(RLLVMCompile)
numericMatrixType = MatrixType(DoubleType) # REALSXPType # # no dimensions known at compile time.
fc = compileFunction(f, VoidType, list(numericMatrixType, Int32Type))
</r:code>
<r:code>
x = matrix(1:10 + .5, 5, 2)
.llvm(fc, x, 3L, .all = TRUE)[[1]]
</r:code>
</para>
</section>


</article>
<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="../OmegahatXSL/XSL/OmegahatXSL/Todo.xsl" ?>

<topics xmlns:r="http://www.r-project.org" xmlns:c="http://www.c.org"
	>

<topic>
<title>General</title>

<items>

<item>
Identify const variables
</item>

<item>
Handle x[1:10], i.e. x[vector] and x[vector] = value(s).
</item>

<item>
Compile the not() function to test the ! operator.
</item>

<item>
Logical data type
</item>
<item>
Does run() in Rllvm return the mutable parameters?
</item>

<item status="note">
The OPS table/list is now called CompilerHandlers
and it can be customized for a call to 
compileFunction by copying that object and
inserting new elements or replacing existing ones.
</item>

<item status="note">
One can control which functions are compiled
by specifying <r:arg>.globals</r:arg>.
</item>

<item>
Handle default values for parameters.
<br/>
We can compile the code just before the first 
expression at which that parameter is referenced.
</item>

<item>
Handle named arguments and match them during compilation
and reorder. Don't worry about
any assignments  in the expressions which might
make the order important
e.g.
<r:code><![CDATA[
  foo(b = (num <- sum(x)), a = integer(num))
]]></r:code>
This is suicidal code anyhow and 
there is no guarantee b will be evaluated before a
due to lazy evaluation.
</item>

<item status="done">
Allow the caller of compileFunction to specify their own
version of .compilerHandlers to customize how the
code generation operates.
</item>

<item>
Implement the for loop of the form for(i in x) 
by introducing a loop counter, say, .i
and add a new instruction to load x[i].
</item>

<item>
Implement switch.
</item>

<item status="done">
Have the supportFunctionInfo split for external routines
and one that we compile ourselves.
<br/>
If the called functions have type information, then we can compile
them. But allow this to be specified by the caller of compileFunction.
<br/>
Or do type inference.
</item>

<item status="check">
Compiling other R functions we reference.
Compile function tries to do this.
</item>


<item status="done">
Process the .supportFunctionInfo in compileFunction.
</item>

<item status="partial">
Calls to other functions, e.g. log or printf.
<br/>
Use codetools to find these before we start compiling.
Get their types. Allow as parameter in compileFunction.
<br/>
See test.R and the example loop.next and printi
</item>

<item>
An R object (function probably) that
can arrange to load the external symbols before calling run,
i.e. the functions we call that we don't compile.
<br/>
asFunction in compileFunction causes the return of a function.
We can add the names of the external routines to the environment
and arrange to load those when the function is invoked, even
just the first time..
</item>


<item>
Returning R objects.
<br/>
We strip away the SEXP and pass the data to our new routines.
How do we return these as SEXPs, e.g. put them back into
a (new) SEXP.  Rllvm does this for us. But we may want to
take this over as we can.
<br/>
We might want to allocate the space before the call and have
our new routine write into that. Need to avoid duplicating
in the call to run.
<br/>
See how we can do this with a special object with  class
that we return from compileFunction.
</item>

<item>
Memory management
</item>

<item status="done">
Split the incrementing in a loop into its own condition so that
we can jump to that block of code for a continue.
<br/>
Done, but giving wrong result for continue.
See loop.next
</item>

<item>
Unary logical operator !. A good way to do this would be use LLVM's
XOR op with 1.
</item>

<item status="done">
We just return the compiled function or the R function now and not the module
as we can get the module from the function with 
<r:code>as(fun, "Module")</r:code>
Also, <r:expr>showModule(fun) </r:expr> works without any
need to explicitly coerce the function to a module.
</item>

<item status="done">
The type of the logical in the branch is wrong.
See the rep function
<r:code>a = compileFunction(rep, Int32Type)</r:code>
</item>

<item status="check">
Finish off next and break handlers.
Specifically, have the while and for loops 
register then .nextBlock and .continueBlock.
Put these on a stack.
</item>

<item status="check">
Implement repeat
</item>

<item>
Handle cases where R doesn't return anything explicitly, i.e. just NULL implicitly, but we need
a particular type, e.g. an integer in 

<r:code><![CDATA[
foo = function(x) if(x < 10) 100L
]]></r:code>
At least identify these for the person calling compile and ask for a default
value. <r:na/> can work for certain types.
<br/>
See insertReturn in utils.R.
This will work for simple cases. But not for  cases with if, while,
for. Here we will have to jump out of those local blocks and then return
from the routine.  So we will need to change the code that would return to assign to a
fixed variable (e.g. .return) and then jump to the end block
</item>

<item>
Create temporary variable for if statements 
when we assign the value to a variable in R, e.g.

<r:code><![CDATA[
x = if(a < 1) "abc" else "def"
]]></r:code>
Need to store the value from the expressions
in the bodies of the if statement.
</item>



<item>
[ operator for simple vectors.
<br/>
Have to be aware of factor, Date and POSIXt types.
</item>
<item>
[ operator for matrices
</item>

<item>
[ for data frame.
<br/>
Get the variable then [] on the vector.
We can hope the LLVM optimizer will 

</item>

<item>
Consolidate the 2 getLimits functions.
</item>

<item status="done">
May want to simplify compile() and not call getArgs() and pass them to
the handler funcition - call.op. Many of the handlers will need the entire call.
</item>

<item status="done">
The for loop, like the if, needs to know where to branch to.  So it
needs the next.  It can create a new Block and refer to it.  Then the
next expression being compiled can just write to that without having
to even worry.  So we don't need to create the blocks for each
expression and pass the nextBlock argument.
</item>

<item>
Need a function to give the name of an available temporary variable
for our function we are compiling.
</item>

<item>
Handle no explicit return() in the code
i.e. 
<r:code>
function() { 
  x = 1
  y = 2
  x + y
}
</r:code>
where the last expression is the return value.
See the <r:pkg>TypeInfo</r:pkg> package for how we do this.
</item>

<item status="done">
Add connections to the different blocks, i.e.
 when generate code for one block and then another
 add a branch from the first to the next.

    getBlocks() gives us the blocks for a function.

</item>

<item> 
  Handle vectorized operations of ==, +, !, etc.
</item>

<item> 
  Handle unary "-".
</item>

<item status="done">
Add returning correct Null in R_Module_getGlobalVariable in Rllvm so
assignHandler gets to second condition.
</item>

</items>
</topic>
<topic>
<title>Type Inference</title>
<items>
<item>
Identify const variables.
</item>

<item>
When compiling a function
and we are given its types,
follow those through the expressions to determine
the types of local variables
and also then follow calls to other functions
and determine the types of those calls
and so recursively follow the expressions in those other
functions.
</item>

<item>
Figure out the output from a function based on its inputs
and the functions it calls.
</item>

<item>
Handle variable reassignment; possibly by using a strategy of renaming
variables. Are arguments immutable? Should this be treated exactly as
it is in R?
<r:code>
t2 <- function(x) {
  y <- 4L
  x <- y
  return(x)
}
</r:code>
</item>

</items>
</topic>
</topics>


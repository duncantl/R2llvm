For whileBreak.R
  If we have an expression after the if(cond) break in the whileBreak.R code, everything works fine.
  But if this is the end of the body of the while(whileCond) {}, then we get an infinite loop
  in the condition.

  If we add an expression after the if(ctr == 5L) break,  then compilation error - no terminator.
 (That's if we take out the ir$setInsertPoint(cond) in while.R)


In createLoopCode:  
  pass incrBlock as nextBlock when compiling the body
    works for simplerNestedIfInLoop1.R but not simplerNestedIfInLoop.R

Do we need to rewrite all of this to make explicit continue the loop and next block after the loop 


Currently, 
   source("../explorations/simplerNestedIfInLoop.R")
 goes into an infinite loop.
 But 
   source("../explorations/simplerNestedIfInLoop1.R")
 doesn't.


   In the Block after.if (dir == RED), we branch back to this same block  if the condition nextCol == 1L is false.
   This is a createCondBr() call. Find out where we make this and see who is specifying the alternative block.
   Why does this work for the simplerNestedIfInLoop1.R version? Because that code has an else after the if(nextCol == 1L) so it is setting it itself.

    createLoopCode:  We have the more complex condition in compileExpressions about when to create a nextBlock and when to reuse afterBlock, etc.



+ If compiling individual expressions sequentually (e.g. in callRFunction to create new functions),
for any if, for, while statements that need to know the next block, we need to set env$.remainingExpressions
to the next expression coming after.


?? Do we need the nextBlock and continueBlock stack.

Test with

  +  Fix while() loop to do the same as for. (Perhaps consolidate.)

  + [Working] statement after nextCol = if(cond) a else b within if(dir == RED) { }    - see simplerNestedIfInLoop*.R
              See simplerNestedIfLoop2.R

  + [Working] nested for loops with an if inside the inner loop
       See tests/nestedLoopsIf.R
       More immediately tests/nestedLoops.R is broken.

  +  Handle break and next/continue in loops with if statements.




         We have to take care when process the inner loop. We are passed a nextBlock for the outer loop.
         In the following example, that
         for(i in 1:10) {  # outer
            a = 1
            for(j in 2:5) {
               if(i == j)
                  printf("Hi\n")
            }
            a = 2
         }



TEST:
 source("tests/simpleIf.R")
 source("tests/basicIf.R")
 source("tests/forBreak.R")
 source("tests/nestedLoops.R")
 source("tests/nestedLoops1.R")
 source("tests/nestedLoops2.R")
 source("tests/nestedLoopsIf.R")
 source("explorations/simplerNestedIfInLoop.R")
 source("explorations/simplerNestedIfInLoop1.R")
 source("explorations/simplerNestedIfInLoop2.R")